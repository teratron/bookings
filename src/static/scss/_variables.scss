@use "sass:math";
@use "sass:list";
@use "sass:meta";

$unit: 20px;

// Layout
$layout-width: 1280px;
$layout-width-min: 360px;
$layout-gap: 40px;

// Grid
$grid-column: 12;
$grid-gap: 40px;

// App
$header-height: 96px;
$footer-height: 220px;
$main-height: 220px;
$border-radius: .35rem;

// Calculated variables
$ratio: math.div(100vw, $layout-width);

$layout-gap-adaptive: $ratio * $layout-gap;

$grid-gap-adaptive: $ratio * $grid-gap;
$grid-width: $layout-width - 2 * $layout-gap;
$grid-step: math.round(math.div(($grid-width - $layout-width-min), $grid-column));

//---
$cell-width: math.round(math.div($grid-width, $grid-column));

@function get-list-cell-width() {
    $list: [];
    $r: math.div(100px, $layout-width);
    @for $i from 1 through $grid-column {
        $list: list.append($list, $i * $cell-width);
    }
    @return $list;
}

$cell-list-width: get-list-cell-width();

//---
$grid-width-adaptive: 100vw - 2 * $layout-gap-adaptive;
$cell-width-adaptive: math.div($grid-width-adaptive, $grid-column);

@function get-list-cell-width-adaptive() {
    $list: [];
    @for $i from 1 through $grid-column {
        $list: list.append($list, $i * $cell-width-adaptive);
    }
    @return $list;
}

$cell-list-width-adaptive: get-list-cell-width-adaptive();

:root {
    --cell1: #{$grid-width-adaptive};
    --cell11: #{$cell-width-adaptive};
    --cell111: #{get-list-cell-width-adaptive()};
    --cell: #{get-list-cell-width()};
    --cell2: #{list.length(get-list-cell-width())};
    --cell4: #{list.nth(get-list-cell-width(), 3)};

    /* Layout */
    --app-header-height: #{$header-height};
    --app-footer-height: #{$footer-height};
    --app-main-height: #{$main-height};

    /* Theme */
    @include app-theme;
}
