/*@mixin breakpoint($placeholder) {
    #{$placeholder} {
        @media only screen and (max-width: $layout-width-gap) {
            background-color: #0009e1;
        }
    }
    @extend #{$placeholder};
}*/
//@include breakpoint('%ph');


@mixin add-style($props) {
    @each $key, $value in $props {
        #{$key}: $value;
    }
}

@mixin add-class($selector, $props) {
    @if $selector == & {
        & {
            @include add-style($props);
        }
    } @else {
        #{$selector} {
            @include add-style($props);
        }
    }
}

@mixin app-breakpoint($width, $props) {
    //%bp {
    @media only screen {
        @media (max-width: $width) {
            @include add-style($props);
        }
    }
    //}
}


/*.color-primary-bg {
    background-color: var(--color-primary);
}

.color-primary {
    color: var(--color-primary);
}*/

/*.font-size-20 {
    font-size: 1.25rem; // 20px
}*/

/*$font-sizes: (
    tiny: $h1-font-size,
    small: $h2-font-size,
    normal: 1rem,
    4: $h4-font-size,
    5: $h5-font-size,
    6: $h6-font-size
);*/

/*$app-breakpoint: (
        1: 300px,
        2: 400px,
        3: 500px,
        4: 600px,
        5: 700px,
        6: 800px,
        7: 900px,
        8: 1000px,
        9: 1100px,
        10: $layout-width
    );*/

/*.aaa {
    @each $key, $value in $app-breakpoint {
        &--#{$key} {
            width: $value;
        }
    }
}*/


/*@mixin app-breakpoint() {

}*/

/*%app-breakpoint-max {
    @media only screen {
        @media (max-width: $layout-width) {
        }
    }
}*/

/*@media only screen {
    @media (max-width: $width) {
        #{$s} {
            @each $key, $value in $props {
                $key: $value;
            }
        }
    }
}*/

@mixin app-break($width, $props) {
    %br {
        @media only screen {
            @media (max-width: $width) {
            }
        }
    }
}


$props: (
        grid-column-gap: 3.2vw,
        margin-right: 0,
        margin-left: 0,
        padding-right: 1.82vw,
        padding-left: 1.82vw
);
@include app-breakpoint($layout-width, $props);

// Tile
/*@media only screen and (min-width: 0) {
    .tile > * {
        width: 100%;
    }

    @for $i from 1 through $grid-column {
        .tile-#{$i} > * {
            $j: math.div(100%, $i);
            width: $j;
            max-width: $j;
        }
    }
}

@for $i from 1 through $grid-column {
    @media only screen and (min-width: (120px + $i*120px)) {
        .tile > * {
            $j: math.div(100%, ($i + 1));
            width: $j;
            max-width: $j;
        }
    }
}

@for $i from 1 through $grid-column {
    @for $j from 1 through 6*$i {
        @media only screen and (min-width: math.round(math.div($layout-width-min + $j * $layout-width-min, $i))) {
            .tile-#{$i} > * {
                $k: math.div(100%, ($i + $j));
                width: $k;
                max-width: $k;
            }
        }
    }
}*/

