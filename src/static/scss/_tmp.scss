//$grid-step: math.round(math.div(($grid-width - $layout-width-min), $grid-column));

/*@mixin breakpoint($placeholder) {
    #{$placeholder} {
        @media only screen and (max-width: $layout-width-gap) {
            background-color: #0009e1;
        }
    }
    @extend #{$placeholder};
}*/
//@include breakpoint('%ph');


@mixin add-style($props) {
    @each $key, $value in $props {
        #{$key}: $value;
    }
}

@mixin add-class($selector, $props) {
    @if $selector == & {
        & {
            @include add-style($props);
        }
    } @else {
        #{$selector} {
            @include add-style($props);
        }
    }
}

@mixin app-breakpoint($width, $props) {
    //%bp {
    @media only screen {
        @media (max-width: $width) {
            @include add-style($props);
        }
    }
    //}
}


/*.color-primary-bg {
    background-color: var(--color-primary);
}

.color-primary {
    color: var(--color-primary);
}*/

/*.font-size-20 {
    font-size: 1.25rem; // 20px
}*/

/*$font-sizes: (
    tiny: $h1-font-size,
    small: $h2-font-size,
    normal: 1rem,
    4: $h4-font-size,
    5: $h5-font-size,
    6: $h6-font-size
);*/

/*$app-breakpoint: (
        1: 300px,
        2: 400px,
        3: 500px,
        4: 600px,
        5: 700px,
        6: 800px,
        7: 900px,
        8: 1000px,
        9: 1100px,
        10: $layout-width
    );*/

/*.aaa {
    @each $key, $value in $app-breakpoint {
        &--#{$key} {
            width: $value;
        }
    }
}*/


/*@mixin app-breakpoint() {

}*/

/*%app-breakpoint-max {
    @media only screen {
        @media (max-width: $layout-width) {
        }
    }
}*/

/*@media only screen {
    @media (max-width: $width) {
        #{$s} {
            @each $key, $value in $props {
                $key: $value;
            }
        }
    }
}*/

@mixin app-break($width, $props) {
    %br {
        @media only screen {
            @media (max-width: $width) {
            }
        }
    }
}


$props: (
                grid-column-gap: 3.2vw,
                margin-right: 0,
                margin-left: 0,
                padding-right: 1.82vw,
                padding-left: 1.82vw
        );
@include app-breakpoint($layout_width, $props);

// Tile
/*@media only screen and (min-width: 0) {
    .tile > * {
        width: 100%;
    }

    @for $i from 1 through $grid-column {
        .tile-#{$i} > * {
            $j: math.div(100%, $i);
            width: $j;
            max-width: $j;
        }
    }
}

@for $i from 1 through $grid-column {
    @media only screen and (min-width: (120px + $i*120px)) {
        .tile > * {
            $j: math.div(100%, ($i + 1));
            width: $j;
            max-width: $j;
        }
    }
}

@for $i from 1 through $grid-column {
    @for $j from 1 through 6*$i {
        @media only screen and (min-width: math.round(math.div($layout-width-min + $j * $layout-width-min, $i))) {
            .tile-#{$i} > * {
                $k: math.div(100%, ($i + $j));
                width: $k;
                max-width: $k;
            }
        }
    }
}*/

// Tile
/*.tile {
    display: grid;
    //grid-auto-flow: column;
    grid-template-columns: repeat(auto-fit, minmax($grid-step, 1fr));
}

@for $i from 1 through $grid-column {
    .tile-#{$i} {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax($grid-step, 1fr));
        grid-auto-flow: dense;
    }
}*/

/*$i: 1;
@each $value in $cell-list-width {
    .f-#{$i} {
        width: $value;
    }
    $i: $i + 1;
}*/


// Tile
/* .tile {
    //$a:                    math.div($grid-width, $grid-column); // 1200 / 12 = 100
    //$b:                    math.div($grid-width - $a, $grid-column); //(1200 - 100) / 12 = 91.666

    display:        grid;
    // grid-template-columns: repeat(auto-fit, minmax($b, 1fr));
    grid-auto-flow: dense;
    grid-auto-rows: minmax($unit, auto);

    @for $i from $grid-column to 1 {
        $k: $i - 1;
        $b: list.nth($list-breakpoints, $k);
        $d: math.div($b+1, $i);
        @media only screen and (max-width: $b) {
            grid-template-columns: repeat(auto-fit, minmax($d, 1fr));
        }
    }
} */

// 1100/12 = 91.666
// 1000/11 = 90.909
//  900/10 = 90
//  800/9  = 88.888

@function set-list-cell($list, $index) {
    $i: 0;
    @each $value in $list {
        @if $i == $index {
            @return $value;
        }
        $i: $i + 1;
    }
}

/*
@for $i from $grid-column to 1 {
    $k: $i - 1;
    $b: math.round($grid-width - ($grid-column - $k) * $grid-step);

    @if $b >= $layout-width-min {
        @media only screen and (max-width: $b) {
            .shrink {
                &,
                > %grid-#{$i},
                > %span-#{$i} {
                    grid-template-columns: repeat($k, 1fr);
                }

                > %grid-#{$i},
                > %span-#{$i} {
                    grid-column: span $k;
                }
            }

            @for $j from $i through $grid-column {
                .grid-#{$j} {
                    @extend %grid-#{$i};
                }

                .span-#{$j} {
                    @extend %span-#{$i};
                }
            }
        }
    }
}*/

/*
@for $i from list.length($cell-list-width) to 0 {
    $b: list.nth($cell-list-width, $i) - 2 * $layout-gap;
    $k: $i - 1;

    @if $b >= $layout-width-min {
    @media only screen and (max-width: $b) {
    .shrink {
        &,
        > %grid-#{$i},
        > %span-#{$i} {
            grid-template-columns: repeat($k, 1fr);
            //grid-template-columns: repeat(auto-fill, minmax($cell-width, 1fr));
        }

        > %grid-#{$i},
        > %span-#{$i} {
            grid-column: span $k;
        }
    }

    @for $j from $i through $grid-column {
        .grid-#{$j} {
            @extend %grid-#{$i};
        }

        .span-#{$j} {
            @extend %span-#{$i};
        }
    }
    }
    }
}*/

//---
/*$grid-width-adaptive: 100vw - 2 * $layout-gap-adaptive;
$cell-width-adaptive: math.div($grid-width-adaptive, $grid-column);

@function get-list-cell-width-adaptive() {
    $list: [];

    @for $i from 1 through $grid-column {
        $list: list.append($list, $i * $cell-width-adaptive);
    }

    @return $list;
}

$cell-list-width-adaptive: get-list-cell-width-adaptive();*/