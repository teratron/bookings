@use "sass:math";
@use "sass:list";
@use "sass:string";

// https://sass-lang.com/documentation/style-rules/parent-selector
// https://sass-lang.com/documentation/at-rules/at-root
@mixin setPropsAdaptive($props) {
    @each $key, $value in $props {
        @if $value > 0 {
            #{$key}: $value;
        }
    }

    @media only screen and (max-width: list.nth($list-breakpoints, $grid-column)) {
        @each $key, $value in $props {
            @if $value > 0 {
                #{$key}: $rate * $value;
            } @else {
                #{$key}: 0;
            }
        }
    }
    //@extend
}

// Layout
.layout {
    width:        100%;
    max-width:    $layout-width;
    margin-left:  auto;
    margin-right: auto;

    @include setPropsAdaptive((
            padding-left: $layout-gap,
            padding-right: $layout-gap,
    ));
}

// Grid
.grid {
    display: grid;
}

%grid {
    @extend .grid;
    grid-auto-flow: dense;
    grid-auto-rows: minmax($unit, auto);

    @include setPropsAdaptive((
            grid-gap: $grid-gap,
    ));
}

%span {
    width:     auto;
    max-width: none;
}

@for $i from 1 through $grid-column {
    .grid-#{$i} {
        grid-template-columns: repeat($i, 1fr);
        @extend %grid;
    }

    .grid-#{$i},
    .span-#{$i} {
        grid-column: span $i;
    }

    .span-#{$i} {
        @extend %span;
    }
}

// Shrink
@for $i from $grid-column to 1 {
    $k: $i - 1;
    $b: list.nth($list-breakpoints, $k);

    //@if $b >= $layout-width-min {
    @media only screen and (max-width: $b) {
        .shrink {
            &,
            > %grid-#{$i},
            > %span-#{$i} {
                grid-template-columns: repeat($k, 1fr);
            }

            > %grid-#{$i},
            > %span-#{$i} {
                grid-column: span $k;
            }
        }

        @for $j from $i through $grid-column {
            .grid-#{$j} {
                @extend %grid-#{$i};
            }

            .span-#{$j} {
                @extend %span-#{$i};
            }
        }
    }
    //}
}

// Tile
.tile {
    //$a:                    math.div($grid-width, $grid-column); // 1200 / 12 = 100
    //$b:                    math.div($grid-width - $a, $grid-column); //(1200 - 100) / 12 = 91.666

    display:        grid;
    // grid-template-columns: repeat(auto-fit, minmax($b, 1fr));
    grid-auto-flow: dense;
    grid-auto-rows: minmax($unit, auto);

    @for $i from $grid-column to 1 {
        $k: $i - 1;
        $b: list.nth($list-breakpoints, $k);
        $d: math.div($b+1, $i);
        @media only screen and (max-width: $b) {
            grid-template-columns: repeat(auto-fit, minmax($d, 1fr));
        }
    }
}

// 1100/12 = 91.666
// 1000/11 = 90.909
//  900/10 = 90
//  800/9  = 88.888
