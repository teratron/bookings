@use "sass:math";

// Grid
%grid {
    display: grid;
}

.grid {
    @extend %grid;
    grid-auto-flow: dense; //TODO: column?

    @if $grid-gap > 0 {
        grid-gap: $grid-gap;
        @extend %grid-gap-adaptive;
    }
}

@for $i from 1 through $grid-column {
    .grid-#{$i} {
        @extend .grid;
        grid-template-columns: repeat($i, minmax(0, 1fr));
    }
}

// Span
%span {
    width: auto;
    max-width: none;
}

@for $i from 1 through $grid-column {
    .span-#{$i} {
        grid-column: span $i;
        @extend %span;

        &.grid {
            grid-template-columns: repeat($i, minmax(0, 1fr));
        }
    }
}

// Layout
.layout {
    width: 100%;
    max-width: $layout-width-gap;
    margin-left: auto;
    margin-right: auto;

    @if $layout-gap > 0 {
        padding-left: $layout-gap;
        padding-right: $layout-gap;
        @extend %layout-gap-adaptive;
    }
}

// Breakpoint
@media only screen and (max-width: $layout-width-gap) {
    %grid-gap-adaptive {
        grid-gap: $grid-gap-adaptive;
    }

    %layout-gap-adaptive {
        margin-left: 0;
        margin-right: 0;
        padding-left: $layout-gap-adaptive;
        padding-right: $layout-gap-adaptive;
    }
}

// Shrink
@for $i from $grid-column to 1 {
    $k: $i - 1;
    $b: math.round($layout-width-gap - ($grid-column - $k) * $grid-step);

    @media only screen and (max-width: $b) {
        .shrink {
            &, > %span-#{$i} {
                grid-template-columns: repeat($k, minmax(0, 1fr));
            }

            > %span-#{$i} {
                grid-column: span $k;
            }
        }

        @for $j from $i through $grid-column {
            .span-#{$j} {
                @extend %span-#{$i};
            }
        }
    }
}

// Tile

