@use "sass:math";
//@use "sass:list";
//@use "sass:string";

@mixin setPropsAdaptive($props) {
    @each $key, $value in $props {
        @if $value > 0 {
            #{$key}: $value;
        }
    }

    @media only screen and (max-width: getBreakpoint($grid_column)) {
        @each $key, $value in $props {
            @if $value > 0 {
                #{$key}: $layout_rate * $value;
            } @else {
                #{$key}: 0;
            }
        }
    }
}

// Layout
.layout {
    width:        100%;
    max-width:    $layout_width;
    margin-left:  auto;
    margin-right: auto;

    @include setPropsAdaptive((
            padding-left: $layout_gap,
            padding-right: $layout_gap,
    ));
}

// Grid
.grid {
    display: grid;
}

%grid {
    @extend .grid;
    grid-auto-flow: dense;
    grid-auto-rows: minmax($grid_cell_height, auto);

    @include setPropsAdaptive((
            grid-gap: $grid_gap,
    ));
}

%span {
    width:     auto;
    max-width: none;
}

@for $i from 1 through $grid_column {
    .grid-#{$i} {
        grid-template-columns: repeat($i, 1fr);
        @extend %grid;
    }

    .span-#{$i},
    .grid-#{$i},
    .grid-#{$i} > .fit {
        grid-column: span $i;
    }

    .fit,
    .span-#{$i} {
        @extend %span;
    }
}

// Shrink
@for $i from $grid_column to 1 {
    $k: $i - 1;
    //$b: list.nth($list_breakpoints, $k);
    $b: getBreakpoint($k);

    @if $b >= $layout-width-min {
        @media only screen and (max-width: $b) {
            .shrink {
                &,
                > %grid-#{$i} {
                    grid-template-columns: repeat($k, 1fr);
                }

                > %span-#{$i},
                > .grid-#{$i} > .fit {
                    grid-column: span $k;
                }
            }

            @for $j from $i through $grid_column {
                .grid-#{$j},
                .span-#{$j} {
                    @extend %grid-#{$i};
                    @extend %span-#{$i};
                }
            }
        }
    }
}

// Spread/extend
