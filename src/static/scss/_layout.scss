@use "sass:math";
@use "sass:list";
@use "sass:string";

// https://sass-lang.com/documentation/style-rules/parent-selector
// https://sass-lang.com/documentation/at-rules/at-root
@mixin set-adaptive-props($props) {
    @each $key, $value in $props {
        #{$key}: $value;
    }

    @media only screen and (max-width: ($layout-width - 1)) {
        @each $key, $value in $props {
            #{$key}: $rate * $value;
        }
    }
}

// Layout
.layout {
    width: 100%;
    max-width: $layout-width;
    margin-left: auto;
    margin-right: auto;

    @if $layout-gap > 0 {
        //padding-left: $layout-gap;
        //padding-right: $layout-gap;
        //@extend %layout-gap-adaptive;

        @include set-adaptive-props(
            (
                padding-left: $layout-gap,
                padding-right: $layout-gap,
            )
        );
    }
}

// Grid
.grid {
    display: grid;
}

%grid {
    @extend .grid;
    grid-auto-flow: dense;
    grid-auto-rows: minmax($unit, auto);

    @if $grid-gap > 0 {
        //grid-gap: $grid-gap;
        //@extend %grid-gap-adaptive;

        @include set-adaptive-props(
            (
                grid-gap: $grid-gap,
            )
        );
    }
}

%span {
    width: auto;
    max-width: none;
}

@for $i from 1 through $grid-column {
    .grid-#{$i} {
        grid-template-columns: repeat($i, 1fr);
        @extend %grid;
    }

    .grid-#{$i},
    .span-#{$i} {
        grid-column: span $i;
    }

    .span-#{$i} {
        @extend %span;
    }
}

// Breakpoint
/*@media only screen and (max-width: ($layout-width - 1)) {
    %layout-gap-adaptive {
        margin-left: 0;
        margin-right: 0;
        padding-left: $layout-gap-adaptive;
        padding-right: $layout-gap-adaptive;
    }

    %grid-gap-adaptive {
        grid-gap: $grid-gap-adaptive;
    }
}*/

// Shrink
@for $i from $grid-column to 1 {
    $k: $i - 1;
    $b: list.nth($list-breakpoint, $k);

    @if $b >= $layout-width-min {
        @media only screen and (max-width: $b) {
            .shrink {
                &,
                > %grid-#{$i},
                > %span-#{$i} {
                    grid-template-columns: repeat($k, 1fr);
                }

                > %grid-#{$i},
                > %span-#{$i} {
                    grid-column: span $k;
                }
            }

            @for $j from $i through $grid-column {
                .grid-#{$j} {
                    @extend %grid-#{$i};
                }

                .span-#{$j} {
                    @extend %span-#{$i};
                }
            }
        }
    }
}

// Tile
.tile {
    display: grid;
    grid-auto-flow: dense;
    grid-template-columns: repeat(auto-fit, minmax(92px, 1fr));
}

@for $i from 1 through $grid-column {
    .tile-#{$i} {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
        grid-auto-flow: dense;
    }
}
